/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaProject1;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author JYo
 */
public class BookMangement extends javax.swing.JFrame {

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    public BookMangement() {
        initComponents();
        this.setLocationRelativeTo(null);
        //con = Connect.connect();
        con = Connect2.connect();
        fillData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void fillData() {
        try {
            String qurey = "select * from LIBRARYADMIN.BOOKS";
            pst = con.prepareStatement(qurey);
            rs = pst.executeQuery();
            allData.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        addBtn1 = new javax.swing.JButton();
        deleteBtn1 = new javax.swing.JButton();
        updateBtn1 = new javax.swing.JButton();
        searchBtn1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        allData = new javax.swing.JTable();
        idT = new javax.swing.JTextField();
        authorT = new javax.swing.JTextField();
        titleT = new javax.swing.JTextField();
        priceT = new javax.swing.JTextField();
        publisherT = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(150, 75, 0));

        jPanel1.setBackground(new java.awt.Color(150, 75, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Book Mangement", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 36), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(150, 75, 0));

        addBtn1.setBackground(new java.awt.Color(102, 60, 31));
        addBtn1.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        addBtn1.setForeground(new java.awt.Color(255, 255, 255));
        addBtn1.setText("Add");
        addBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtn1ActionPerformed(evt);
            }
        });

        deleteBtn1.setBackground(new java.awt.Color(102, 60, 31));
        deleteBtn1.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        deleteBtn1.setForeground(new java.awt.Color(255, 255, 255));
        deleteBtn1.setText("Delete");
        deleteBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtn1ActionPerformed(evt);
            }
        });

        updateBtn1.setBackground(new java.awt.Color(102, 60, 31));
        updateBtn1.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        updateBtn1.setForeground(new java.awt.Color(255, 255, 255));
        updateBtn1.setText("Update");
        updateBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtn1ActionPerformed(evt);
            }
        });

        searchBtn1.setBackground(new java.awt.Color(102, 60, 31));
        searchBtn1.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        searchBtn1.setForeground(new java.awt.Color(255, 255, 255));
        searchBtn1.setText("Show All Data");
        searchBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtn1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ID:");

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Title:");

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Author:");

        jLabel6.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Publisher:");

        jLabel7.setFont(new java.awt.Font("Calibri", 1, 26)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Price:");

        allData.setAutoCreateRowSorter(true);
        allData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Author", "Publisher", "Price"
            }
        ));
        jScrollPane1.setViewportView(allData);

        idT.setFont(new java.awt.Font("Calibri", 0, 26)); // NOI18N
        idT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idTKeyPressed(evt);
            }
        });

        authorT.setFont(new java.awt.Font("Calibri", 0, 26)); // NOI18N
        authorT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                authorTKeyReleased(evt);
            }
        });

        titleT.setFont(new java.awt.Font("Calibri", 0, 26)); // NOI18N
        titleT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                titleTKeyPressed(evt);
            }
        });

        priceT.setFont(new java.awt.Font("Calibri", 0, 26)); // NOI18N
        priceT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                priceTKeyPressed(evt);
            }
        });

        publisherT.setFont(new java.awt.Font("Calibri", 0, 26)); // NOI18N
        publisherT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                publisherTKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Note: you can search by Titel just type anything you want search");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(addBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchBtn1)
                        .addContainerGap(65, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(publisherT)
                                    .addComponent(priceT)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(idT)
                                    .addComponent(titleT)
                                    .addComponent(authorT))))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(164, 164, 164))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(idT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(titleT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(authorT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(publisherT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(priceT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtn1ActionPerformed
        // TODO add your handling code here:\
        //if (idT.getText() == "" || titleT.getText().isEmpty() || authorT.equals("") || publisherT.getText() == "" || priceT.getText() == "") {
        int id;
        double price;
        if (idT.getText().isEmpty() || titleT.getText().isEmpty() || authorT.getText().isEmpty() || publisherT.getText().isEmpty() || priceT.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Fill all filed please");
            return;
        } else {
            try {
                price = Double.valueOf(priceT.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Price must be number", "Error", JOptionPane.ERROR_MESSAGE);
            }
            try {
                id = Integer.valueOf(idT.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "The ID must be a number without decimal or fractional parts", "Error", JOptionPane.ERROR_MESSAGE);
            }

            try {
                String idQurey = "select * from LIBRARYADMIN.BOOKS where ID = ?";
                pst = con.prepareStatement(idQurey);
                pst.setString(1, idT.getText());
                rs = pst.executeQuery();
                if (rs.next()) {
                    JOptionPane.showMessageDialog(rootPane, "Book ID already exists. Please use a unique ID", "Error", JOptionPane.WARNING_MESSAGE);
                    idT.setText("");
                } else {
                    try {
                        String addQurey = "INSERT INTO LIBRARYADMIN.BOOKS (ID,Title,Author,Publisher,Price) VALUES (?,?,?,?,?)";
                        pst = con.prepareStatement(addQurey);
                        pst.setString(1, idT.getText());
                        pst.setString(2, titleT.getText());
                        pst.setString(3, authorT.getText());
                        pst.setString(4, publisherT.getText());
                        pst.setString(5, priceT.getText());
                        pst.executeUpdate();
                        idT.setText("");
                        titleT.setText("");
                        authorT.setText("");
                        publisherT.setText("");
                        priceT.setText("");
                        JOptionPane.showMessageDialog(rootPane, "Added Successful");
                        fillData();
                    } catch (SQLException ex) {
                        Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_addBtn1ActionPerformed

    private void deleteBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtn1ActionPerformed
        // TODO add your handling code here:
//        switch (){;
//            case 
//        }
//             
//        try {
//            int row = allData.getSelectedRow();
//            String id2 = allData.getModel().getValueAt(row, 0).toString();
//            String dSelectQurey = "DELETE from LIBRARYADMIN.BOOKS where ID =?";
//            pst = con.prepareStatement(dSelectQurey);
//            pst.setString(1, id2);
//            int x = pst.executeUpdate();
//            JOptionPane.showMessageDialog(rootPane, x + " Deleted Successful");
//            fillData();
//        } catch (SQLException ex) {
//            Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
//        }

        if (idT.getText().isEmpty() || !titleT.getText().isEmpty() || !authorT.getText().isEmpty() || !publisherT.getText().isEmpty() || !priceT.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please just fill ID to Delete");
            titleT.setText("");
            authorT.setText("");
            publisherT.setText("");
            priceT.setText("");
            return;
        } else {
            try {
                int id;
                id = Integer.valueOf(idT.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "The ID must be a number without decimal or fractional parts", "Error", JOptionPane.ERROR_MESSAGE);
            }
            try {
                String idQurey = "select * from LIBRARYADMIN.BOOKS where ID = ?";
                pst = con.prepareStatement(idQurey);
                pst.setString(1, idT.getText());
                rs = pst.executeQuery();
                if (!rs.next()) {
                    JOptionPane.showMessageDialog(rootPane, "The ID does not found\ntry with valid id", "Error", JOptionPane.WARNING_MESSAGE);
                    idT.setText("");
                    return;
                } else {
                    try {
                        String deleteQurey = "DELETE from LIBRARYADMIN.BOOKS where ID = ?";
                        pst = con.prepareStatement(deleteQurey);
                        pst.setString(1, idT.getText());
                        pst.executeUpdate();
                        idT.setText("");
                        titleT.setText("");
                        authorT.setText("");
                        publisherT.setText("");
                        priceT.setText("");
                        JOptionPane.showMessageDialog(rootPane, "Deleted Successful");
                        fillData();

                    } catch (SQLException ex) {
                        Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_deleteBtn1ActionPerformed

    private void updateBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtn1ActionPerformed
        // TODO add your handling code here:
//        int row = allData.getSelectedRow();
//        if (row == -1) {
//            JOptionPane.showMessageDialog(rootPane, "Please select a row or fill data");
//            return;
//        } else {
//            String id2 = allData.getModel().getValueAt(row, 0).toString();
//            String title2 = allData.getModel().getValueAt(row, 1).toString();
//            String author2 = allData.getModel().getValueAt(row, 2).toString();
//            String publisher2 = allData.getModel().getValueAt(row, 3).toString();
//            String price2 = allData.getModel().getValueAt(row, 4).toString();
//            idT.setText(id2);
//            titleT.setText(title2);
//            authorT.setText(author2);
//            publisherT.setText(publisher2);
//            priceT.setText(price2);
//        }

        if (idT.getText().isEmpty() || titleT.getText().isEmpty() || authorT.getText().isEmpty() || publisherT.getText().isEmpty() || priceT.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Fill all filed please");
            return;
        } else {
            try {
                double price;
                price = Double.valueOf(priceT.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Price must be number", "Error", JOptionPane.ERROR_MESSAGE);
            }
            try {
                int id;
                id = Integer.valueOf(idT.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "The ID must be a number without decimal or fractional parts", "Error", JOptionPane.ERROR_MESSAGE);
            }

            try {
                String idQurey = "select * from LIBRARYADMIN.BOOKS where ID = ?";
                pst = con.prepareStatement(idQurey);
                pst.setString(1, idT.getText());
                rs = pst.executeQuery();
                if (!rs.next()) {
                    JOptionPane.showMessageDialog(rootPane, "The ID does not found\ntry with valid id", "Error", JOptionPane.WARNING_MESSAGE);
                    idT.setText("");
                } else {
                    try {
                        String updateQurey = "UPDATE LIBRARYADMIN.BOOKS set Title = ? ,Author = ?,Publisher = ?,Price =? where id = ?";
                        pst = con.prepareStatement(updateQurey);
                        pst.setString(1, titleT.getText());
                        pst.setString(2, authorT.getText());
                        pst.setString(3, publisherT.getText());
                        pst.setString(4, priceT.getText());
                        pst.setString(5, idT.getText());
                        pst.executeUpdate();
                        idT.setText("");
                        titleT.setText("");
                        authorT.setText("");
                        publisherT.setText("");
                        priceT.setText("");
                        JOptionPane.showMessageDialog(rootPane, "Updated Successful");
                        fillData();
                    } catch (SQLException ex) {
                        Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            } catch (SQLException ex) {
                Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_updateBtn1ActionPerformed

    private void searchBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtn1ActionPerformed
        // TODO add your handling code here:
        fillData();


    }//GEN-LAST:event_searchBtn1ActionPerformed

    private void titleTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_titleTKeyPressed
        // TODO add your handling code here:
        try {
            String q = "select * from LIBRARYADMIN.BOOKS where Title Like ?";
            pst = con.prepareStatement(q);
            pst.setString(1, "%" + titleT.getText() + "%");
            rs = pst.executeQuery();
            allData.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_titleTKeyPressed

    private void authorTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorTKeyReleased
        // TODO add your handling code here:
        try {
            String q = "select * from LIBRARYADMIN.BOOKS where Title Like ?";
            pst = con.prepareStatement(q);
            pst.setString(1, "%" + titleT.getText() + "%");
            rs = pst.executeQuery();
            allData.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_authorTKeyReleased

    private void publisherTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_publisherTKeyPressed
        // TODO add your handling code here:
        try {
            String q = "select * from LIBRARYADMIN.BOOKS where Title Like ?";
            pst = con.prepareStatement(q);
            pst.setString(1, "%" + titleT.getText() + "%");
            rs = pst.executeQuery();
            allData.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_publisherTKeyPressed

    private void priceTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTKeyPressed
        // TODO add your handling code here:
        try {
            String q = "select * from LIBRARYADMIN.BOOKS where Title Like ?";
            pst = con.prepareStatement(q);
            pst.setString(1, "%" + titleT.getText() + "%");
            rs = pst.executeQuery();
            allData.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_priceTKeyPressed

    private void idTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTKeyPressed
        // TODO add your handling code here:
        try {
            String q = "select * from LIBRARYADMIN.BOOKS where Title Like ?";
            pst = con.prepareStatement(q);
            pst.setString(1, "%" + titleT.getText() + "%");
            rs = pst.executeQuery();
            allData.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(BookMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_idTKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookMangement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookMangement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookMangement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookMangement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookMangement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn1;
    private javax.swing.JTable allData;
    private javax.swing.JTextField authorT;
    private javax.swing.JButton deleteBtn1;
    private javax.swing.JTextField idT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField priceT;
    private javax.swing.JTextField publisherT;
    private javax.swing.JButton searchBtn1;
    private javax.swing.JTextField titleT;
    private javax.swing.JButton updateBtn1;
    // End of variables declaration//GEN-END:variables
}
